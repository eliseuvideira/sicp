#!/usr/bin/env bb

(defn A [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        :else (A (- x 1) (A x (- y 1)))))

(println (A 1 10))
; 1024

(println (A 2 4))
; 65536

(println (A 3 3))
; 65536

;;
;;
(defn f [n]
  (A 0 n))
; (* 2 y)
; f(n) = 2n

(run! println (map f '(1 2 3 4)))
; 2, 4, 6, 8

;;
;;
(defn g [n]
  (A 1 n))
; (A 1 1)
; 2

; (A 1 2)
; (A (- 1 1) (A 1 (- 2 1)))
; (A 0 (A 1 1))
; (A 0 2)
; (* 2 2)
; 4

; (A 1 3)
; (A (- 1 1) (A 1 (- 3 1)))
; (A 0 (A 1 2))
; (A 0 4)
; (* 2 4)
; 8

; (A 1 4)
; (A 0 (A 1 3))
; (A 0 (A 0 (A 1 2)))
; (A 0 (A 0 (A 0 (A 1 1))))
; (A 0 (A 0 (A 0 2)))
; (* 2 (* 2 (* 2 2)))
; 16

(run! println (map g '(1 2 3 4 5 6 7 8)))
; 2 4 8 16 32
; g(n) = 2 ** n

;;
;;
(defn h [n]
  (A 2 n))
; (A 2 3)
; (A 1 (A 2 2))
; (A 1 (A 1 (A 2 1)))
; (A 1 (A 1 2))
; (A 1 (A 0 (A 1 1)))
; (A 1 (A 0 2))
; (A 1 (* 2 2))
; (A 1 4)
; 16

; (A 2 4)
; (A 1 (A 2 3))
; (A 1 (A 1 (A 2 2)))
; (A 1 (A 1 (A 1 (A 2 1))))
; (A 1 (A 1 (A 1 2)))
; (A 1 (A 1 (A 1 (A 0 1))))
; (A 1 (A 1 (A 1 2)))
; (A 1 (A 1 4))
; (A 1 16)

(run! println (map h '(1 2 3 4)))
; 2, 4, 16, 65536
; h(n) = 2 ** h(n-1)
