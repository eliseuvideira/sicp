#!/usr/bin/env bb

(defn abs [x]
  (if (< x 0)
    (- x)
    x))

(def tolerance 0.00001)

(defn fixed-point [f first-guess]
  (defn close-enough? [v1 v2]
    (< (abs (- v1 v2)) tolerance))
  (defn try-guess [guess]
    (let [next (f guess)]
      (if (close-enough? guess next)
        next
        (try-guess next))))
  (try-guess first-guess))

(def dx 0.00001)

(defn deriv [g]
  (fn [x]
    (/ (- (g (+ x dx)) (g x))
       dx)))

(defn newton-transform [g]
  (fn [x]
    (- x (/ (g x) ((deriv g) x)))))

(defn newtons-method [g guess]
  (fixed-point (newton-transform g) guess))

(defn square [x]
  (* x x))

(defn sqrt [x]
  (newtons-method (fn [y] (- (square y) x)) 1.0))

(println (sqrt 9))
(println (sqrt 81))
(println (sqrt 100))
(println (sqrt 10000))
(println (sqrt 103041))
