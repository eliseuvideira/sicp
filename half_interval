#!/usr/bin/env bb

(defn close-enough? [x y]
  (< (abs (- x y)) 0.001))

(defn avg [x y]
  (/ (+ x y) 2.0))

(defn positive? [x]
  (> x 0))

(defn negative? [x]
  (< x 0))

(defn search [f neg-point pos-point]
  (let [midpoint (avg neg-point pos-point)]
    (if (close-enough? neg-point pos-point)
      midpoint
      (let [test-value (f midpoint)]
        (cond (positive? test-value) (search f neg-point midpoint)
              (negative? test-value) (search f midpoint pos-point)
              :else midpoint)))))

(defn error [message]
  (throw (Exception. message)))

(defn half-interval-method [f a b]
  (let [a-value (f a)
        b-value (f b)]
    (cond (and (negative? a-value) (positive? b-value))
          (search f a b)
          (and (negative? b-value) (positive? a-value))
          (search f b a)
          :else (error "Values are not of opposite sign" a b))))

(defn sin [x]
  (Math/sin x))

(println (half-interval-method sin 2.0 4.0))

(println (half-interval-method
          (fn [x] (- (* x x x) (* 2 x) 3))
          1.0
          2.0))
